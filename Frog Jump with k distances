//Memoization method
int f(vector<int> &dp,vector<int> &height,int n,int k){
    if(n <= 0){
        return 0;
    }
    if(dp[n] != -1){
        return dp[n];
    }
    int misteps = INT_MAX;
    
    for(int i=1; i<=k; i++){
        if(n-i >= 0){
            int left = f(dp,height,n-i,k) + abs(height[n] - height[n-i]);
            misteps = min(misteps,left);
        }
        else{
            break;
        }
    }
    return dp[n] = misteps;
}

int minimizeCost(int n, int k, vector<int> &height){
    // Write your code here.
    vector<int> dp(n+1,-1);
    return f(dp,height,n-1,k);
}

//Tabulation method
int minimizeCost(int n, int k, vector<int> &height){
    // Write your code here.
    vector<int> dp(n+1);
    dp[0] = 0;
    int misteps;

    for(int i=1; i<n; i++){
        misteps = INT_MAX;
        for(int j=1; j<=k; j++){
            if (i - j >= 0) {
              int jump = dp[i-j] + abs(height[i] - height[i-j]);
              misteps = min(misteps,jump);
            }
        }
        dp[i] = misteps;
    }
    return dp[n-1];
}
