//Memoization method

#include <bits/stdc++.h>
int f(int idx,vector<int> &nums,vector<int> &dp){
    if(idx == 0){
        return nums[idx];
    }
    if(idx < 0){
        return 0;
    }
    if(dp[idx] != -1){
        return dp[idx];
    }

    int pick = f(idx-2,nums,dp) + nums[idx];
    int notpick = 0 + f(idx-1,nums,dp);

    return dp[idx] = max(pick,notpick);
}

int maximumNonAdjacentSum(vector<int> &nums){
    int n = nums.size();
    vector<int> dp(n+1,-1);
    return f(n-1,nums,dp);
}

//Tabulation method

#include <bits/stdc++.h>
int maximumNonAdjacentSum(vector<int> &nums){
    int n = nums.size();
    vector<int> dp(n+1);
    
    dp[0] = nums[0];

    for(int i=1; i<n; i++){
        int pick = nums[i];
        if(i-2 >= 0){
            pick += dp[i-2];
        }
        int notpick = 0 + dp[i-1];

        dp[i] = max(pick,notpick);
    }
    return dp[n-1];
}

//Normal method

#include <bits/stdc++.h>
int maximumNonAdjacentSum(vector<int> &nums){
    int n = nums.size();
    int prev = nums[0];
    int prev2 = 0;

    for(int i=1; i<n; i++){
        int pick = nums[i];
        if(i-2 >= 0){
            pick += prev2;
        }
        int notpick = 0 + prev;
        int curr = max(pick,notpick);
        prev2 = prev;
        prev = curr;
    }
    return prev;
}
