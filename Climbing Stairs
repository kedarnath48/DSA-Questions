// Memoization method

class Solution {
private:
    int f(int n,vector<int> &dp){
        if(n == 0){
            return 1;
        }
        if(n == 1){
            return 1;
        }
        if(dp[n] != -1){
            return dp[n];
        }
        dp[n] = f(n-1,dp) + f(n-2,dp);
        return dp[n];
    }

public:
    int climbStairs(int n) {
        vector<int> dp(n+1,-1);
        return f(n,dp);
    }
};

// Tabulation method

class Solution {
public:
    int climbStairs(int n) {
        vector<int> dp(n+1);
        dp[0] = 1;
        dp[1] = 1;
        for(int i=2; i<=n; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
};

// Normal method

class Solution {
public:
    int climbStairs(int n) {
        vector<int> dp(n+1);
        int prev = 1;
        int prev2 = 1;
        
        for(int i=2; i<=n; i++){
            int curr = prev + prev2;
            prev2 = prev;
            prev = curr;
        }
        return prev;
    }
};
